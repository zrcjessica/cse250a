String.prototype.toRelativeTime = function(now_threshold) {
  var dt = new Date();
  dt.setISO8601(this);
  return dt.toRelativeTime(now_threshold);
};
String.prototype.toDate = function() {
  var dt = new Date();
  dt.setISO8601(this);
  return dt;
};
String.prototype.usDateToDB = function() {
  var arr = this.split('/');
  if (arr.length == 3) {
    if(arr[0].length == 1) arr[0] = "0" + arr[0];
    if(arr[1].length == 1) arr[1] = "0" + arr[1];
    return arr[2] + '-' + arr[0] + '-' + arr[1];
  }
};
String.prototype.trim = function() {
  return this.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
};
// TODO: do we still need to support this patch?
if (typeof Array.prototype.forEach != 'function') {
  Array.prototype.forEach = function(func) {
    for (var i = 0; i < this.length; i++)
    func(this[i]);
  };
}
Array.prototype.remove = function(val) {
    for (var i in this) {
        if (this[i] === val) {
          this.splice(i, 1);
        }
    }
};
Array.prototype.removeF = function(func) {
    for (var i in this) {
        if (func(this[i])) {
          this.splice(i, 1);
        }
    }
};
Array.prototype.findAll = function(func) {
    var items = [];
    this.forEach(function(i) {
    	if (!isFunction(i)) {
    		if (func(i)) {
    			items.push(i);
    		}
    	}
    });
    return items;
};
function shuffleArray(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
}
function isFunction(obj) {
	return Object.prototype.toString.call(obj) === "[object Function]";
};
function showSecs(secs) {
  if (secs == 0) return "1 sec";
  if (!secs) return "-";
  if (secs < 60) return "" + secs + " sec";
  if (secs < 60*60) return "" + Math.round(secs / 60) + " min";
  return "" + Math.round(secs / 60 / 6) / 10 + " hr";
}
Date.prototype.toRelativeTime = function(now_threshold) {
  var delta = new Date() - this;

  now_threshold = parseInt(now_threshold, 10);

  if (isNaN(now_threshold)) {
    now_threshold = 10000;
  }

  if (delta <= now_threshold) {
    return '<span title="' + this + '">Just now</span>';
  }

  var units = null;
  var conversions = {
    millisecond: 1, // ms    -> ms
    second: 1000,   // ms    -> sec
    minute: 60,     // sec   -> min
    hour:   60,     // min   -> hour
    day:    24,     // hour  -> day
    month:  30,     // day   -> month (roughly)
    year:   12      // month -> year
  };

  for (var key in conversions) {
    if (delta < conversions[key]) {
      break;
    } else {
      units = key; // keeps track of the selected key over the iteration
      delta = delta / conversions[key];
    }
  }

  // pluralize a unit when the difference is greater than 1.
  delta = Math.floor(delta);
  if (delta !== 1) { units += "s"; }
  return '<span title="' + this + '">' + [delta, units, "ago"].join(" ") + '</span>';
};

Date.prototype.get12 = function() {
  var hour = this.getHours();
  var mins = this.getMinutes();
  var ap = "AM";
  if (hour   > 11) { ap = "PM";         }
  if (hour   > 12) { hour = hour - 12;  }
  if (hour   == 0) { hour = 12;         }
  if (mins   < 10) { mins = "0" + mins; }
  return "" + hour + ":" + mins + ap;
};

Date.prototype.getWDay = function() {
  return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][this.getDay()];
};

Date.prototype.getFullDate = function() {
  return "" + (this.getMonth() + 1) + "/" + this.getDate() + "/" + (this.getFullYear() % 100);
};

Date.prototype.toISOString = Date.prototype.toISOString || function() {
  return this.getUTCFullYear() + "-"
    + ("0" + (this.getUTCMonth() + 1) + "-").slice(-3)
    + ("0" + this.getUTCDate() + "T").slice(-3)
    + ("0" + this.getUTCHours() + ":").slice(-3)
    + ("0" + this.getUTCMinutes() + ":").slice(-3)
    + ("0" + this.getUTCSeconds() + ".").slice(-3)
    + ("00" + this.getUTCMilliseconds() + "Z").slice(-4);
};
Array.prototype.exist = function(val) {
  for (var i in this)
    if (this[i] == val) return true;
  return false;
};

/*
 * Wraps up a common pattern used with this plugin whereby you take a String
 * representation of a Date, and want back a date object.
 */
Date.fromString = function(str) {
  return new Date(Date.parse(str));
};

Date.prototype.setISO8601 = function(dString) {
  var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;
  if (!dString) return this;
  if (dString.toString().match(new RegExp(regexp))) {
    var d = dString.match(new RegExp(regexp));
    var offset = 0;
    this.setUTCDate(1);
    this.setUTCFullYear(parseInt(d[1],10));
    this.setUTCMonth(parseInt(d[3],10) - 1);
    this.setUTCDate(parseInt(d[5],10));
    this.setUTCHours(parseInt(d[7],10));
    this.setUTCMinutes(parseInt(d[9],10));
    this.setUTCSeconds(parseInt(d[11],10));
    if (d[12])
    this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
    else
    this.setUTCMilliseconds(0);
    if (d[13] != 'Z') {
      offset = (d[15] * 60) + parseInt(d[17],10);
      offset *= ((d[14] == '-') ? -1 : 1);
      this.setTime(this.getTime() - offset * 60 * 1000);
    }
  } else {
    this.setTime(Date.parse(dString));
  }
  return this;
};
Date.prototype.getFullDate = function() {
  return "" + (this.getMonth() + 1) + "/" + this.getDate() + "/" + (this.getFullYear() % 100);
}

var dateFormat = function () {
  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
    timezoneClip = /[^-+\dA-Z]/g,
    pad = function (val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) val = "0" + val;
      return val;
    };

  // Regexes and supporting functions are cached through closure
  return function (date, mask, utc) {
    var dF = dateFormat;

    // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
    if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
      mask = date;
      date = undefined;
    }

    // Passing date through Date applies Date.parse, if necessary
    date = date ? new Date(date) : new Date;
    if (isNaN(date)) throw SyntaxError("invalid date");

    mask = String(dF.masks[mask] || mask || dF.masks["default"]);

    // Allow setting the utc argument via the mask
    if (mask.slice(0, 4) == "UTC:") {
      mask = mask.slice(4);
      utc = true;
    }

    var _ = utc ? "getUTC" : "get",
      d = date[_ + "Date"](),
      D = date[_ + "Day"](),
      m = date[_ + "Month"](),
      y = date[_ + "FullYear"](),
      H = date[_ + "Hours"](),
      M = date[_ + "Minutes"](),
      s = date[_ + "Seconds"](),
      L = date[_ + "Milliseconds"](),
      o = utc ? 0 : date.getTimezoneOffset(),
      flags = {
        d:    d,
        dd:   pad(d),
        ddd:  dF.i18n.dayNames[D],
        dddd: dF.i18n.dayNames[D + 7],
        m:    m + 1,
        mm:   pad(m + 1),
        mmm:  dF.i18n.monthNames[m],
        mmmm: dF.i18n.monthNames[m + 12],
        yy:   String(y).slice(2),
        yyyy: y,
        h:    H % 12 || 12,
        hh:   pad(H % 12 || 12),
        H:    H,
        HH:   pad(H),
        M:    M,
        MM:   pad(M),
        s:    s,
        ss:   pad(s),
        l:    pad(L, 3),
        L:    pad(L > 99 ? Math.round(L / 10) : L),
        t:    H < 12 ? "a"  : "p",
        tt:   H < 12 ? "am" : "pm",
        T:    H < 12 ? "A"  : "P",
        TT:   H < 12 ? "AM" : "PM",
        Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
        o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
        S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
      };

    return mask.replace(token, function ($0) {
      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
    });
  };
}();
dateFormat.masks = {
  "default":      "ddd mmm dd yyyy HH:MM:ss",
  shortDate:      "m/d/yy",
  mediumDate:     "mmm d, yyyy",
  longDate:       "mmmm d, yyyy",
  fullDate:       "dddd, mmmm d, yyyy",
  shortTime:      "h:MM TT",
  mediumTime:     "h:MM:ss TT",
  longTime:       "h:MM:ss TT Z",
  isoDate:        "yyyy-mm-dd",
  isoTime:        "HH:MM:ss",
  isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
  isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};
// Internationalization strings
dateFormat.i18n = {
  dayNames: [
    "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
    "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
  ],
  monthNames: [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
    "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
  ]
};
Date.prototype.format = function (mask, utc) {
  return dateFormat(this, mask, utc);
};


function openDropdown(selector, event) {
  closeDropDown();
  $(selector).show();
  if (event.preventDefault) event.preventDefault();
  if (event.stop) event.stop();
  if (event.stopPropagation) event.stopPropagation();
  return false;
}
function closeDropDown() {
    $('.top_bar_dropdown_wrapper').hide();
    $('.general_dropdown').hide();
    $('.topbar_arrow').removeClass('settings_active');
    $('.topbar_account_wrapper').removeClass('active');
    $('.topBar_button_left').removeClass('active');
    $('.topBar_button_left').removeClass('highlighted');
    $('.topBar_button_right').removeClass('active');
    $('#user_button').removeClass('active');
    //P.top_bar.populateTopbarButtons(currentNetworkId); // in case this was removed
}

var DID_REPLACE_LATEST = false;
var POLL_OPTS = [];
function ProcessText(text, noReplace, contentType) {
  // do latex logic
  DID_REPLACE_LATEST = false;
  if (!text) return "";
  if (text.indexOf("<") >= 0) DID_REPLACE_LATEST = true;
  if (noReplace) {
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
  }
  //text = text.replace(/([^>]|<br>)\n/g, "$1<br>");
  //text = text.replace(/([^>]|<br>)\n/g, "$1<br>");
  text = text.replace(/\n/g, "<br>");
  text = text.replace(/<br><br><ul>/g, "<br><ul>");
  text = text.replace(/<br><br><ol>/g, "<br><ol>");
  text = text.replace(/<\/ul><br>/g, "</ul>");
  text = text.replace(/<\/ol><br>/g, "</ol>");
  text = text.replace(/<br><li>/g, "<li>");
  text = text.replace(/<\/li><br>/g, "</li>");
  text = text.replace(/<br><br><pre>/g, "<br><pre>");
  text = text.replace(/<\/pre><br>/g, "</pre>");
  if (noReplace) return text;
  text = text.replace(/&amp;/g, "&");
  text = text.replace(/&quot;/g, '"');
  var pres = text.match(/<pre>[\s\S]*?<\/pre>/g);
  var tts = text.match(/<tt>[\s\S]*?<\/tt>/g);
  if (pres) {
    for (var i = 0; i < pres.length; i++) {
      text = text.replace(pres[i], "<|_p_" + i + "_p_|>");
    }
  }
  if (tts) {
    for (var i = 0; i < tts.length; i++) {
      text = text.replace(tts[i], "<|_tt_" + i + "_tt_|>");
    }
  }
  var arr = text.split('$$');
  if (arr.length > 2) {
    // potential latex
    for (var i = 1; i <= arr.length - 1; i+=2) {
      var str = arr[i]
      if (str.length >= 1) {
        // look for special chars: \, _, ^
        //if ((!str.match(/[\s]/) || str.match(/[\\_^]/)) && str.indexOf("<br>") == -1) {
          var content_text = str;
          content_text = content_text.replace(/&lt;/g, "<");
          content_text = content_text.replace(/&gt;/g, ">");
          content_text = content_text.replace(/&amp;/g, "&");
          content_text = content_text.replace(/&quot;/g, '"');
          content_text = content_text.replace(/<br>/g, "\n");
          var replaced = "<img style='width: auto;vertical-align: text-bottom;' src='/main/show_latex?" + escape(content_text) + "'/>"
          DID_REPLACE_LATEST = true;
          text = text.replace("$$" + str + "$$", replaced);
          //text = text.replace("$" + replaced, replaced);
          //text = text.replace("$" + replaced, replaced);
          //text = text.replace(replaced + "$", replaced);
          //text = text.replace(replaced + "$", replaced);
        //}
      }
    }
  }
  // replace URLs with links, except directly following a quote character
  // URLs are defined as http or https, followed by ://, followed by a sequence of non-whitespace, non-bracket, non-double quote characters, followed by one word character or certain punctuation
  // the text immediately after a URL must be whitespace; a newline; end of input; a comma, period, or colon followed by one of the first three; or a closing parenthesis or HTML-escaped > followed by an optional period, comma, colon or semicolon followed by one of the first three
  text = text.replace(/(^|[^"'])(https?:\/\/(\([^\s<\[\]"\)]*\)|[^ \t\n<\[\]"()])+?(\([^\s<\[\]"\)]*\)|[\w\/?=)}#&]))(?=$|<br|<\/|\s|([\]\)]|&gt;)[\.,:;?!"'\-]*(\s|<br|<\/|$)|[\.,:;!"'\-]+(\s|<br|<\/|$))/g, '$1<a href="$2" target="_blank">$2</a>');
  // don't make links on Piazza.com go to a new tab
  text = text.replace(/target="_blank">https?:\/\/(www\.)?piazzz?a\.com\/class/g, '>https://piazza.com/class');
  if (typeof PD != 'undefined') {
    //text = text.replace(/([^\w\/])#(\w[\w-]*(-&gt;){0,1}[\w-]+)/g, "$1" + PD.makeTag("$2"));
    //text = text.replace(/^#(\w[\w-]*(-&gt;){0,1}[\w-]+)/g, PD.makeTag("$1"));
    //if (PD.tags) {
    //  var regex = new RegExp('(#' + PD.tags.instructor.join("|#").replace(/\+/g, "\\+").replace(/\*/g, "\\*").replace(/\./g, "\\.") + ')', "g");
    //  text = text.replace(regex, '');
    //}
    text = text.replace(/([^\w\/])#(\w[\w\-.+]*[\w\-+]+)/g, "$1" + PD.makeTag("$2"));
    text = text.replace(/^#(\w[\w\-.+]*[\w\-+]+)/g, PD.makeTag("$1"));
    text = text.replace(/([^\w\/])#(\w)([^\w\/<\-.+])/g, "$1" + PD.makeTag("$2") + "$3");
    text = text.replace(/([^\w\/])#(\w)$/g, "$1" + PD.makeTag("$2"));
    text = text.replace(/^@(\d+)/g, '<a href="#' + PD.term + "/" + PD.selectedNetwork.short_number + '/$1">@$1</a>');
    text = text.replace(/([^\w])@(\d+)/g, '$1<a href="#' + PD.term + "/" + PD.selectedNetwork.short_number + '/$2">@$2</a>');
  }
  if (pres) {
    for (var i = 0; i < pres.length; i++) {
      text = text.replace("<|_p_" + i + "_p_|>", "<pre style='white-space: -moz-pre-wrap;white-space: -o-pre-wrap;white-space: pre-wrap;word-wrap: break-word;'>" +
        pres[i].substr(5, pres[i].length - 11).replace(/[$]/g, "$$$$").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&lt;br&gt;/g, "<br>") + "</pre>");
    }
  }
  if (tts) {
    for (var i = 0; i < tts.length; i++) {
      text = text.replace("<|_tt_" + i + "_tt_|>", "<tt>" + tts[i].substr(4, tts[i].length - 9).replace(/[$]/g, "$$$$").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&lt;br&gt;/g, "<br>") + "</tt>");
    }
  }
  if (contentType == "poll") {
    var allToReplace = text.match(/\[[o*]]/g);
    POLL_OPTS = [];
    if (allToReplace) {
      for (var i = 0; i < allToReplace.length; i++) {
        var toReplace = allToReplace[i];
        var checked = "";
        if ($('#pollButton' + i).attr('checked')) checked = " checked";
        var replaceWith = "<input type='radio' class='pollButton' name='pollRadioButton' id='pollButton" + i + "'" + checked + "/>";
        if (toReplace == "[*]")
          replaceWith = "<input type='checkbox' class='pollButton' name='pollRadioButton' id='pollButton" + i + "'" + checked + "/>";
        var at = text.indexOf(toReplace);
        var enter = text.indexOf("<br", at);
        if (enter < 0) enter = text.length;
        var label = text.substr(at + 3, (enter - at - 3));
        var goodLabel = label.replace(/<[^>]*>/g, "");
        POLL_OPTS.push(goodLabel);
        var before = text.substr(0, at + 3);
        var after = text.substr(enter);
        text = before + goodLabel + after;
        text = text.replace(toReplace, replaceWith);
      }
      text += "<br/><br/><span id='pollAnonymityPlaceholder' class='subregionMetadata'></span><br/><button onclick='PD.doVote();' class='pollButton'>Submit</button>";
    }
  }
  // get back pre and cc
  return text;
}

function getFileTypeIcon(name) {
  var fileTypes = {
    avi:'avi.png', css:'css.png', xls:'excel.png', xlsx:'excel.png', doc:'word.png', docx:'word.png',
    zip:'zip.png', gz:'zip.png', tar:'zip.png', gif:'gif.png', html:'html.png', htm:'html.png',
    jpg:'jpg.png', jepg:'jpg.png', jpeg:'jpg.png', js:'js.png', mov:'mov.png', mp3:'mp3.png', mpg:'mpg.png', mpeg:'mpg.png',
    pdf:'pdf.png', png:'png.png', ppt:'powerpoint.png', pptx:'powerpoint.png', txt:'text.png', wma:'wma.png',
    wmv:'wmv.png', doc:'word.png', docx:'word.png', xml:'xml.png'
  }
  var folder = "https://dvngeac8rg9mb.cloudfront.net/images/dashboard/qa-panel/types/"
  var parts = name.split('.');
  if (parts.length == 0) return folder + "default.png";
  var ext = parts[parts.length - 1].toLowerCase();
  if (fileTypes[ext]) return folder + fileTypes[ext];
  return folder + "default.png";
}
function isFileTypeImage(name) {
  var parts = name.split('.');
  if (parts.length == 0) return false;
  var ext = parts[parts.length - 1].toLowerCase();
  return ["jpg", "jpeg", "png", "gif"].exist(ext);
}

/* from http://selbie.wordpress.com/2011/01/23/scale-crop-and-center-an-image-with-correct-aspect-ratio-in-html-and-javascript/ */
function scaleImage(srcwidth, srcheight, targetwidth, targetheight, fLetterBox) {

    var result = { width: 0, height: 0, fScaleToTargetWidth: true };

    if ((srcwidth <= 0) || (srcheight <= 0) || (targetwidth <= 0) || (targetheight <= 0)) {
        return result;
    }

    // scale to the target width
    var scaleX1 = targetwidth;
    var scaleY1 = (srcheight * targetwidth) / srcwidth;

    // scale to the target height
    var scaleX2 = (srcwidth * targetheight) / srcheight;
    var scaleY2 = targetheight;

    // now figure out which one we should use
    var fScaleOnWidth = (scaleX2 > targetwidth);
    if (fScaleOnWidth) {
        fScaleOnWidth = fLetterBox;
    }
    else {
       fScaleOnWidth = !fLetterBox;
    }

    if (fScaleOnWidth) {
        result.width = Math.floor(scaleX1);
        result.height = Math.floor(scaleY1);
        result.fScaleToTargetWidth = true;
    }
    else {
        result.width = Math.floor(scaleX2);
        result.height = Math.floor(scaleY2);
        result.fScaleToTargetWidth = false;
    }
    result.targetleft = Math.floor((targetwidth - result.width) / 2);
    result.targettop = Math.floor((targetheight - result.height) / 2);

    return result;
}

/* from http://selbie.wordpress.com/2011/01/23/scale-crop-and-center-an-image-with-correct-aspect-ratio-in-html-and-javascript/ */
function onImageLoad(evt, takeTwo) {
  var img;
  try {
    img = evt.currentTarget;
    img = (evt.currentTarget) ? evt.currentTarget : evt.srcElement;
  } catch (err) {
    return;
  }
    if (takeTwo) {
      img = takeTwo;
      $(img).show();
      $(img).css({
        width: 'auto',
        height: 'auto',
        left: '0px'
      });
    }
    if (!img) return;
    // what's the size of this image and it's parent
    var w = img.naturalWidth;
    var h = img.naturalHeight;
    var parent = $(img).parent();
    if (parent.hasClass("white_border"))
      parent = parent.parent();
    var tw = parent.width();
    var th = parent.height();

    // compute the new size and offsets
    var result = scaleImage(w, h, tw, th, false);

    if ((result.width == 0 || result.height == 0) && !takeTwo) {
      // if zero, allow DOM to render first
      var rememberEvent = evt;
      setTimeout(function(){ onImageLoad(rememberEvent, img);}, 500);
      $(img).hide();
      return;
    }
    // adjust the image coordinates and size
    img.width = result.width;
    img.height = result.height;
    $(img).css("width", result.width + "px");
    $(img).css("height", result.height + "px");
    $(img).css("left", result.targetleft);
    $(img).css("top", result.targettop);
}

/* When we have the directly dom element */
function onImageChange(img) {
  var w = $(img).width();
  var h = $(img).height();
  var tw = $(img).parent().width();
  var th = $(img).parent().height();

  //console.log(w, h, tw, th);

  // compute the new size and offsets
  var result = scaleImage(w, h, tw, th, false);

  //console.log(result);

  // adjust the image coordinates and size
  img.width = result.width;
  img.height = result.height;
  $(img).css("width", result.width + "px");
  $(img).css("height", result.height + "px");
  $(img).css("left", result.targetleft);
  $(img).css("top", result.targettop);
}

function getDeepParams() {
  return window.location.hash.substring(1).split('/');
}
function resizeFontToHeight(elContainer, elText, maxHeight, minTextSize) {
  var textSize = elText.css('font-size');
  textSize = textSize.replace('px', '');
  while (elContainer.height() > maxHeight && textSize > minTextSize) {
    textSize--;
    elText.css('font-size', textSize + 'px');
  }
}
function networkToUrl(network) {
  if (!network) return "/class";
  return "/class/" + network.id;
}
function isValidEmailAddress(emailAddress) {
  var pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
  return pattern.test(emailAddress);
}

function compare2Objects (x, y) {
  var p;

  // remember that NaN === NaN returns false
  // and isNaN(undefined) returns true
  if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
       return true;
  }

  // Compare primitives and functions.
  // Check if both arguments link to the same object.
  // Especially useful on step when comparing prototypes
  if (x === y) {
      return true;
  }

  // At last checking prototypes as good a we can
  if (!(x instanceof Object && y instanceof Object)) {
      return false;
  }

  // Quick checking of one object beeing a subset of another.
  // todo: cache the structure of arguments[0] for performance
  for (p in y) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false;
      }
      else if (typeof y[p] !== typeof x[p]) {
          return false;
      }
  }

  for (p in x) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false;
      }
      else if (typeof y[p] !== typeof x[p]) {
          return false;
      }

      switch (typeof (x[p])) {
          case 'object':
          case 'function':
              if (!compare2Objects (x[p], y[p])) {
                  return false;
              }
              break;

          default:
              if (x[p] !== y[p]) {
                  return false;
              }
              break;
      }
  }
  return true;
}
