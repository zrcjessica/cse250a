var ResourceCollection = Spine.Model.sub();
ResourceCollection.configure("ResourceCollection", "nid", "title", "headers", "resources");
ResourceCollection.include({
  BASE_URL: "/class_profile/get_resource/",
  init_headers: function() {
    var header, _i, _len, _ref;
    this.resources = [];
    this.has_date = false;
    _ref = this.headers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      header = _ref[_i];
      if (header["class"] === "date") this.has_date = true;
    } 
  },
  add_resource: function(resource) {
    var resource_instance;

    var resource_type = "file";
    var url = this.BASE_URL + this.nid + "/" + resource.id;
    if (resource.config.resource_type != undefined && resource.config.resource_type == "link") {
      resource_type = "link";
      url = resource.url;
    }

    resource_instance = Resource.create({
      id: resource.id,
      title: resource.subject,
      date: resource.config.date,
      section_id: resource.config.section,
      nid: this.nid,
      created: resource.created,
      url: url,
      resource_type: resource_type
    });
    this.resources.push(resource_instance);
    return resource_instance;
  },
  sort: function() {
    var sort_by_title;
    sort_by_title = function(r1, r2) {
      if (r1.title > r2.title) return 1;
      if (r1.title < r2.title) return -1;
      return 0;
    };
    if (this.has_date) {
      this.resources.sort(function(r1, r2) {
        if (r1.date === "" && r2.date === "") {
          return sort_by_title(r1, r2);
        } else if (r1.date === "" && r2.date !== "") {
          return 1;
        } else if (r1.date !== "" && r2.date === "") {
          return -1;
        } else {
          return new Date(r2.date).getTime() - new Date(r1.date).getTime();
        }
      });
    } else {
      this.resources.sort(sort_by_title);
    }
  }
});

